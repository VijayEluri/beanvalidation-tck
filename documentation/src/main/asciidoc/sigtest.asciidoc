[[sigtest]]
== Running the Signature Test

One of the requirements of an implementation passing the TCK is for it
to pass the Bean Validation signature test. This section describes how to run
it against your implementation as a part of a Maven build.

=== Running signature test

Signature files bundled inside this TCK are created using `sigtest-maven-plugin` http://wiki.netbeans.org/SigTest[Maven plugin].
The same plugin can be used to run a signature test to check for any incompatibilities.
Let's take a look how it can be done as a part of Maven build.

Before running an actual test you need to obtain signature file first. It is packaged inside
_beanvalidation-tck-tests_ artifact, so we can get it using `unpack` goal of `maven-dependency-plugin`
as shown below:
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-dependency-plugin</artifactId>
    <executions>
        <execution>
            <id>copy-tck-bv-api-signature-file</id>
            <phase>generate-test-sources</phase>
            <goals>
                <goal>unpack</goal>
            </goals>
            <configuration>
                <artifactItems>
                    <artifactItem>
                        <groupId>org.hibernate.beanvalidation.tck</groupId>
                        <artifactId>beanvalidation-tck-tests</artifactId>
                        <version>${beanvalidation-tck-tests.version}</version>
                        <type>jar</type>
                        <overWrite>false</overWrite>
                    </artifactItem>
                </artifactItems>
                <!-- We just need a file with signatures and nothing else -->
                <includes>**/*.sig</includes>
                <outputDirectory>${project.build.directory}/api-signature</outputDirectory>
            </configuration>
        </execution>
    </executions>
</plugin>
```

To actually run a signature test `check` goal of `sigtest-maven-plugin` can be used.
Previous plugin puts a signature file in _api-signature_ subdirectory of your project
build directory. Having a file there, it can be referenced as `sigfile` configuration
parameter of `sigtest-maven-plugin` plugin like this:
```xml
<plugin>
    <groupId>org.netbeans.tools</groupId>
    <artifactId>sigtest-maven-plugin</artifactId>
    <executions>
        <execution>
            <goals>
                <goal>check</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <packages>javax.validation,javax.validation.bootstrap,javax.validation.constraints,
            javax.validation.constraintvalidation,javax.validation.executable,javax.validation.groups,
            javax.validation.metadata,javax.validation.spi,javax.validation.valueextraction
        </packages>
        <sigfile>${project.build.directory}/api-signature/validation-api-java8.sig</sigfile>
    </configuration>
</plugin>
```

=== Forcing a signature test failure

If you would like to verify that signature test is running correctly make a copy of corresponding
signature file somewhere on your local file system and modify it. For example let us change the
`value()` of `javax.validation.constraints.Max` to `val()` which should make sigtest to fail.

After modifying signature file update configuration line of `sigtest-maven-plugin` to something like:

```
<sigfile>${path_to_folder_containing_your_modified_signature_file}/validation-api-java8.sig</sigfile>
```

If all is done correctly, while running `mvn sigtest:check` on your project, you should see
an error similar to next:

```
[INFO] SignatureTest report
Base version: 2.0.0-SNAPSHOT
Tested version: 2.0.0-SNAPSHOT
Check mode: bin [throws removed]
Constant checking: on


Class javax.validation.constraints.Max
  "E2.7 - Removing member from annotation type" : method public abstract long javax.validation.constraints.Max.val()
```
