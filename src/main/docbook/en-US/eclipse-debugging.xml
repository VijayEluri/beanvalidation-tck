<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ ]>
<chapter id="eclipse-debugging">
   <title>Debugging Tests in Eclipse</title>
   <para>
      This chapter explains how to debug standalone and integration tests from
      the TCK test suite in Eclipse. You should be able to use the lessons
      learned here to debug tests in an alternate IDE as well.
   </para>
   <section>
      <title>Debugging a standalone test</title>
      <para>
         There is almost no difference in how you debug a standalone test
         from how you run it. With the test class open in the Eclipse editor,
         simply right click in the editor view and select Debug As &gt; TestNG
         Test. Eclipse will stop at any breakpoints you set just like it would
         with any other local debug process.
      </para>
      <para>
         If you plan to step into a class in a Web Beans implementation (or any
         other dependent library), you must ensure that the source is properly
         associated with the library. Below are the steps to follow to associate
         the source of Web Beans with the TestNG debug configuration:
      </para>
      <orderedlist>
         <listitem>
            <para>
               Select the Run &gt; Debug Configurations... menu from the main
               menubar
            </para>
         </listitem>
         <listitem>
            <para>
               Select the name of the test class in the TestNG category
            </para>
         </listitem>
         <listitem>
            <para>
               Select the Source tab
            </para>
         </listitem>
         <listitem>
            <para>
               Click the Add... button on the right
            </para>
         </listitem>
         <listitem>
            <para>
               Select Java Project
            </para>
         </listitem>
         <listitem>
            <para>
               Check the project the contains the class you want to debug
               (e.g., webbeans-core)
            </para>
         </listitem>
         <listitem>
            <para>
               Click OK on the Project Selection window
            </para>
         </listitem>
         <listitem>
            <para>
               Click Close on the Debug Configurations window
            </para>
         </listitem>
      </orderedlist>
      <para>
         You'll have to complete those steps for any test class you are
         debugging, though you only have to do it once (the debug configuration
         hangs around indefinitely).
      </para>
      <para>
         Again, running a test in standalone isn't enough to pass the TCK and
         cannot be used to run or debug an integration test. Let's look at how
         to debug a test running in the context of the container.
      </para>
   </section>
   <section>
      <title>Debugging an integration test</title>
      <para>
         In order to debug an integration test, or any test run using in-container
         mode, the test must be configured to run in-container, as described in
         <xref linkend="eclipse-in-container" />,
         and you must attach the IDE debugger to the container. That puts the
         debugger on both sides of the fence, so to speak.
      </para>
      <para>
         Since setting up a test to run in-container has already been
         covered, we'll look at how to attach the IDE debugger to the container,
         and then move on launching the test in debug mode.
      </para>
      <section>
         <title>Attaching the IDE debugger to the container</title>
         <para>
            There are two ways to attach the IDE debugger to the container.
            You can either start the container in debug mode from within the
            IDE, or you can attach the debugger over a socket connection to a
            standalone container running with JPDA enabled.
         </para>
         <para>
            The Eclipse Server Tools, a subproject of the Eclipse Web Tools
            Project (WTP), has support for launching most major application
            servers, including JBoss AS 5. However, if you are using JBoss AS,
            you should consider using JBoss Tools instead, which offers tighter
            integration with JBoss technologies. See either the
            <ulink url="http://www.eclipse.org/webtools/server/server.php">Server Tools documentation</ulink>
            or the
            <ulink url="http://docs.jboss.org/tools/3.0.1.GA/en/as/html/index.html">JBoss Tools documentation</ulink>
            for how to setup a container and start it in debug mode.
         </para>
         <para>
            See
            <ulink
               url="http://maverikpro.wordpress.com/2007/11/26/remote-debug-a-web-application-using-eclipse">this blog entry</ulink>
            to learn how to start JBoss AS with JPDA enabled and how to get the
            Eclipse debugger to connect to the remote process.
         </para>
      </section>
      <section>
         <title>Launching the test in the debugger</title>
         <para>
            Once Eclipse is debugging the container, you can set a breakpoint in
            the test and debug it just like a standalone test. Let's give it a
            try.
         </para>
         <para>
            Open a test annotated with <literal>@IntegrationTest</literal> in
            the Eclipse editor, right click in the editor view, and select Debug
            As &gt; TestNG Test. This time when the IDE hits the breakpoint, it
            halts the JVM thread of the container rather than the thread that
            launched the test.
         </para>
         <para>
            Remember that if you need to debug into dependent libraries, the
            source code for those libraries will need to be registered with the
            TestNG debug configuration as described in the first section in this
            chapter.
         </para>
      </section>
   </section>
<!--
vim: ts=3:sw=3:tw=80:set expandtab
-->
</chapter>
