<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="installation">
  <title>Installation</title>

  <para>This chapter explains how to obtain the TCK and supporting software
  and provides recommendations for how to install/extract it on your
  system.</para>

  <section>
    <title>Obtaining the Software</title>

    <para>You can obtain a release of the Bean Validation TCK project from the
    from the <ulink url="https://www.hibernate.org/6.html">download
    page</ulink> on the Hibernate Validator website. The Bean Validation TCK
    is distributed as a ZIP file, which contains the TCK artifacts (the test
    suite binary and source, the test suite descriptor, the audit source and
    report), the TCK library dependencies in <code>/lib</code> and
    documentation in <code>/doc</code>.</para>

    <para>You can also download the current source code from <ulink
    url="http://anonsvn.jboss.org/repos/hibernate/beanvalidation/tck/trunk/">JBoss
    SVN repository</ulink>.</para>

    <para>The TCK project is available in the JBoss Maven 2 repository as
    org.hibernate.jsr303.tck<code>:</code>org.hibernate.jsr303.tck; the POM
    defines all dependencies required to run the TCK.</para>

    <para>Executing the TCK requires a Java EE 5 or better runtime environment
    (i.e., application server), to which the test artifacts are deployed and
    the individual tests are invoked. The TCK does not depend on any
    particular Java EE implementation.</para>

    <para>The JSR-303: Bean Validation reference implementation (RI) project
    is named Hibernate Validator. You can obtain the latest Hibernate
    Validator release from the <ulink
    url="https://www.hibernate.org/6.html">download page</ulink> on Hibernate
    website.</para>

    <note>
      <para>Hibernate Validator is not required for running the Bean
      Validation TCK, but it can be used as a reference for familiarizing
      yourself with the TCK before testing your own Bean Validation
      implementation.</para>
    </note>
  </section>

  <section id="tck-environment">
    <title>The TCK Environment</title>

    <para>The TCK requires the following two Java runtime environments:</para>

    <itemizedlist>
      <listitem>
        <para>Java 5 or better</para>
      </listitem>

      <listitem>
        <para>Java EE 5 or better (e.g., JBoss AS 5.x or GlassFish V3)</para>
      </listitem>
    </itemizedlist>

    <para>You should refer to vendor instructions for how to install the
    runtime.</para>

    <para>The rest of the TCK software can simply be extracted. It's
    recommended that you create a folder named jsr303 to hold all of the
    jsr303-related projects. Then, extract the TCK distribution into a
    subfolder named tck. You can also check out the full Hibernate Validator
    source into a subfolder ri. This will allow you to run the TCK against
    Hibernate Validator.</para>

    <programlisting>svn co http://anonsvn.jboss.org/repos/hibernate/validator/tags/v_4_0_0_GA ri</programlisting>

    <para>If you have downloaded the Hibernate Validator distribution, extract
    it into a sibling folder named hibernate-validator. The resulting folder
    structure is shown here:</para>

    <programlisting>jsr303/
   ri/
   tck/</programlisting>

    <para>Each test class is treated as an individual artifact (hence the
    <literal>@Artifact(artifactType = ArtifactType.JSR303)</literal>
    annotation on the class). All test methods (i.e., methods annotated with
    <literal>@Test</literal>) in the test class are run. </para>

    <note>
      <para>Using <literal>ArtifactType.JSR303</literal> is an additional
      artifact type to the standard WAR and EAR types offered by the JBoss
      Test Harness. It is basically a normal WAR file with a
      <filename>validation.xml</filename> file at the root of the classpath.
      The <filename>validation.xml</filename> file can be specified with the
      <classname>@ValidationXml </classname>annotation. Using
      <literal>ArtifactType.JSR303</literal> together with
      <classname>@ValidationXml</classname> also allows to have test with
      custom validation.xml files running in standalone mode. This is possible
      by modifying the classloader in standalone mode as shown in
      <classname>org.hibernate.jsr303.tck.util.StandaloneContainersImpl</classname>.
      This container implementation is also the default for sandalone
      mode.</para>
    </note>

    <tip id="tck-in-jboss-as">
      <title>Running the TCK against the Bean Validation RI (Hibernate
      Validator) and JBoss AS</title>

      <itemizedlist>
        <listitem>
          <para>First, you should download JBoss AS 5.1 from the JBoss AS
          <ulink url="http://jboss.org/jbossas/downloads">project
          page</ulink>.</para>
        </listitem>

        <listitem>
          <para>Set the <literal>JBOSS_HOME</literal> environment variable to
          the location of the JBoss AS software.</para>
        </listitem>

        <listitem>
          <para>Change to the
          <filename>ri/hibernate-validator-tck-runner</filename>
          directory.</para>
        </listitem>

        <listitem>
          <para>Make sure the <literal>jboss.home</literal> property in the
          <filename>pom.xml</filename> file references a JBoss AS 5.1
          installation.</para>
        </listitem>

        <listitem>
          <para>You need to install Maven. You can find documention on how to
          install Maven 2 in the <ulink
          url="http://www.sonatype.com/books/maven-book/reference/installation-sect-maven-install.html">Maven:
          The Definitive Guide</ulink> book published by Sonatype. Web Beans
          bundles a copy of Maven in the <code>lib/maven</code>
          directory.</para>
        </listitem>

        <listitem>
          <para>Next, instruct Maven to run the TCK:</para>

          <programlisting>mvn test -Dincontainer</programlisting>
        </listitem>

        <listitem>
          <para>TestNG will report, via Maven, the outcome of the run, and
          report any failures on the console. Details can be found in
          <code>target/surefire-reports/TestSuite.txt</code>.</para>
        </listitem>
      </itemizedlist>
    </tip>
  </section>

  <!--
vim: ts=3:sw=3:tw=80:set expandtab
-->
</chapter>
